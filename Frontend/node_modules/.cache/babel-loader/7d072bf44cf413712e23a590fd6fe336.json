{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\nimport { Canvas as c } from \"react-three-fiber\";\nimport styled from \"styled-components\";\nimport { useSpring, a } from \"react-spring/three\";\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\n\nfunction Content({\n  props,\n  thing\n}) {\n  const mesh = useRef();\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const funky = useSpring({\n    scale: active ? [10, 10, 10] : [20, 20, 20],\n    color: hovered ? \"hotpink\" : \"orange\"\n  });\n  return new Array(100).fill().map((_, i) => {\n    const x = (15 + Math.random() * 30) * (Math.round(Math.random()) ? -1 : 1);\n    const y = -10 + Math.random() * 20;\n    const z = -5 + Math.random() * 10;\n    useFrame(() => {\n      mesh.current.rotation.y = mesh.current.rotation.x += thing;\n    });\n    return React.createElement(a.mesh, Object.assign({}, props, {\n      ref: mesh,\n      scale: funky.scale,\n      onClick: e => setActive(!active),\n      onPointerOver: e => setHover(true),\n      onPointerOut: e => setHover(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [1, 1, 1],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), React.createElement(a.meshStandardMaterial, {\n      attach: \"material\",\n      color: funky.color,\n      roughness: 0.75,\n      metalness: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  });\n}\n\nfunction Lights() {\n  return React.createElement(\"group\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"pointLight\", {\n    intensity: 0.3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"ambientLight\", {\n    intensity: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"spotLight\", {\n    castShadow: true,\n    intensity: 0.2,\n    angle: Math.PI / 7,\n    position: [150, 150, 250],\n    penumbra: 1,\n    \"shadow-mapSize-width\": 2048,\n    \"shadow-mapSize-height\": 2048,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}\n\nconst Canvas = styled(c)`\n  position: absolute !important;\n  margin: 0;\n  padding: 0;\n`;\nexport default function Box() {\n  const [thing, setThing] = useState(0);\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      setThing(data);\n    });\n    console.log(\"state number \" + thing);\n  }, [thing]);\n  return React.createElement(Canvas, {\n    shadowMap: true,\n    camera: {\n      position: [0, 0, 100],\n      fov: 100\n    },\n    gl: ({\n      gl\n    }) => {\n      gl.toneMapping = THREE.ACESFilmicToneMapping;\n      gl.outputEncoding = THREE.sRGBEncoding;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Lights, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(Content, {\n    thing: thing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js"],"names":["React","useRef","useState","useEffect","THREE","useFrame","io","Canvas","c","styled","useSpring","a","endpoint","socket","Content","props","thing","mesh","hovered","setHover","active","setActive","funky","scale","color","Array","fill","map","_","i","x","Math","random","round","y","z","current","rotation","e","Lights","PI","Box","setThing","on","data","console","log","position","fov","gl","toneMapping","ACESFilmicToneMapping","outputEncoding","sRGBEncoding"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\nimport { Canvas as c } from \"react-three-fiber\";\nimport styled from \"styled-components\";\nimport { useSpring, a } from \"react-spring/three\";\n\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\n\nfunction Content({ props, thing }) {\n  const mesh = useRef();\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const funky = useSpring({\n    scale: active ? [10, 10, 10] : [20, 20, 20],\n    color: hovered ? \"hotpink\" : \"orange\"\n  });\n  return new Array(100).fill().map((_, i) => {\n    const x = (15 + Math.random() * 30) * (Math.round(Math.random()) ? -1 : 1);\n    const y = -10 + Math.random() * 20;\n    const z = -5 + Math.random() * 10;\n\n    useFrame(() => {\n      mesh.current.rotation.y = mesh.current.rotation.x += thing;\n    });\n\n    return (\n      <a.mesh\n        {...props}\n        ref={mesh}\n        scale={funky.scale}\n        onClick={e => setActive(!active)}\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}\n      >\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n        <a.meshStandardMaterial\n          attach=\"material\"\n          color={funky.color}\n          roughness={0.75}\n          metalness={0.6}\n        />\n      </a.mesh>\n    );\n  });\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={0.3} />\n      <ambientLight intensity={2} />\n      <spotLight\n        castShadow\n        intensity={0.2}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  );\n}\n\nconst Canvas = styled(c)`\n  position: absolute !important;\n  margin: 0;\n  padding: 0;\n`;\n\nexport default function Box() {\n  const [thing, setThing] = useState(0);\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      setThing(data);\n    });\n    console.log(\"state number \" + thing);\n  }, [thing]);\n\n  return (\n    <Canvas\n      shadowMap\n      camera={{ position: [0, 0, 100], fov: 100 }}\n      gl={({ gl }) => {\n        gl.toneMapping = THREE.ACESFilmicToneMapping;\n        gl.outputEncoding = THREE.sRGBEncoding;\n      }}\n    >\n      <Lights />\n      <Content thing={thing} />\n    </Canvas>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}