{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0);\n  useEffect(() => {\n    socket.on;\n  }); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => mesh.current.rotation.x = mesh.current.rotation.y += {\n    rotation\n  });\n  return React.createElement(\"mesh\", Object.assign({}, props, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: hovered ? \"hotpink\" : \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }));\n}\n\nexport default Box;","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js"],"names":["React","useRef","useState","useEffect","useFrame","io","Box","props","mesh","hovered","setHover","active","setActive","rotation","setRotation","socket","on","current","x","y","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB;AACA,QAAMC,IAAI,GAAGP,MAAM,EAAnB,CAFkB,CAIlB;;AACA,QAAM,CAACQ,OAAD,EAAUC,QAAV,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,MAAM,CAACC,EAAP;AACD,GAFQ,CAAT,CATkB,CAalB;;AACAZ,EAAAA,QAAQ,CACN,MAAOI,IAAI,CAACS,OAAL,CAAaJ,QAAb,CAAsBK,CAAtB,GAA0BV,IAAI,CAACS,OAAL,CAAaJ,QAAb,CAAsBM,CAAtB,IAA2B;AAAEN,IAAAA;AAAF,GADtD,CAAR;AAIA,SACE,8CACMN,KADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAES,CAAC,IAAIR,SAAS,CAAC,CAACD,MAAF,CAJzB;AAKE,IAAA,aAAa,EAAES,CAAC,IAAIV,QAAQ,CAAC,IAAD,CAL9B;AAME,IAAA,YAAY,EAAEU,CAAC,IAAIV,QAAQ,CAAC,KAAD,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe,QAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAgBD;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0);\n\n  useEffect(() => {\n    socket.on;\n  });\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(\n    () => (mesh.current.rotation.x = mesh.current.rotation.y += { rotation })\n  );\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={e => setActive(!active)}\n      onPointerOver={e => setHover(true)}\n      onPointerOut={e => setHover(false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={hovered ? \"hotpink\" : \"orange\"}\n      />\n    </mesh>\n  );\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}