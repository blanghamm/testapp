{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/utils/Connect.js\";\nimport * as THREE from \"three\";\nimport React, { useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { useSprings, a } from \"react-spring/three\";\nimport io from \"socket.io-client\";\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\nconst number = 35;\nconst colors = [\"#A2CCB6\", \"#FCEEB5\", \"#EE786E\", \"#e0feff\", \"lightpink\", \"lightblue\"];\n\nconst random = i => {\n  const r = Math.random();\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      console.log(data);\n    });\n  });\n  return {\n    position: [100 - Math.random() * 200, 100 - Math.random() * 200, i * 1.5],\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    scale: [1 + r * 14, 1 + r * 14, 1],\n    rotation: [0, 0, THREE.Math.degToRad(Math.round(Math.random()) * 45)]\n  };\n};\n\nconst data = new Array(number).fill().map(() => {\n  return {\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    args: [0.1 + Math.random() * 9, 0.1 + Math.random() * 9, 10]\n  };\n});\n\nfunction Content() {\n  const [springs, set] = useSprings(number, i => ({\n    from: random(i),\n    ...random(i),\n    config: {\n      mass: 20,\n      tension: 150,\n      friction: 50\n    }\n  }));\n  useEffect(() => void setInterval(() => set(i => ({ ...random(i),\n    delay: i * 40\n  })), 3000), [set]);\n  return data.map((d, index) => React.createElement(a.mesh, Object.assign({\n    key: index\n  }, springs[index], {\n    castShadow: true,\n    receiveShadow: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: d.args,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(a.meshStandardMaterial, {\n    attach: \"material\",\n    color: springs[index].color,\n    roughness: 0.75,\n    metalness: 0.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })));\n}\n\nexport default function Box() {\n  return React.createElement(Canvas, {\n    shadowMap: true,\n    camera: {\n      position: [0, 0, 100],\n      fov: 100\n    },\n    gl: ({\n      gl\n    }) => {\n      gl.toneMapping = THREE.ACESFilmicToneMapping;\n      gl.outputEncoding = THREE.sRGBEncoding;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/utils/Connect.js"],"names":["THREE","React","useEffect","Canvas","useSprings","a","io","endpoint","socket","number","colors","random","i","r","Math","on","data","console","log","position","color","round","length","scale","rotation","degToRad","Array","fill","map","args","Content","springs","set","from","config","mass","tension","friction","setInterval","delay","d","index","Box","fov","gl","toneMapping","ACESFilmicToneMapping","outputEncoding","sRGBEncoding"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport React, { useEffect } from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { useSprings, a } from \"react-spring/three\";\nimport io from \"socket.io-client\";\n\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\n\nconst number = 35;\nconst colors = [\n  \"#A2CCB6\",\n  \"#FCEEB5\",\n  \"#EE786E\",\n  \"#e0feff\",\n  \"lightpink\",\n  \"lightblue\"\n];\nconst random = i => {\n  const r = Math.random();\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      console.log(data);\n    });\n  });\n  return {\n    position: [100 - Math.random() * 200, 100 - Math.random() * 200, i * 1.5],\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    scale: [1 + r * 14, 1 + r * 14, 1],\n    rotation: [0, 0, THREE.Math.degToRad(Math.round(Math.random()) * 45)]\n  };\n};\n\nconst data = new Array(number).fill().map(() => {\n  return {\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    args: [0.1 + Math.random() * 9, 0.1 + Math.random() * 9, 10]\n  };\n});\n\nfunction Content() {\n  const [springs, set] = useSprings(number, i => ({\n    from: random(i),\n    ...random(i),\n    config: { mass: 20, tension: 150, friction: 50 }\n  }));\n  useEffect(\n    () =>\n      void setInterval(() => set(i => ({ ...random(i), delay: i * 40 })), 3000),\n    [set]\n  );\n  return data.map((d, index) => (\n    <a.mesh key={index} {...springs[index]} castShadow receiveShadow>\n      <boxBufferGeometry attach=\"geometry\" args={d.args} />\n      <a.meshStandardMaterial\n        attach=\"material\"\n        color={springs[index].color}\n        roughness={0.75}\n        metalness={0.5}\n      />\n    </a.mesh>\n  ));\n}\nexport default function Box() {\n  return (\n    <Canvas\n      shadowMap\n      camera={{ position: [0, 0, 100], fov: 100 }}\n      gl={({ gl }) => {\n        gl.toneMapping = THREE.ACESFilmicToneMapping;\n        gl.outputEncoding = THREE.sRGBEncoding;\n      }}\n    >\n      <Content />\n    </Canvas>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}