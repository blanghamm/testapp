{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\n\nconst Dummy = () => {\n  useEffect(() => {\n    //This is not working, continues to update three js until it crashes.\n    socket.on(\"three\", data => {\n      console.log(\"hit \" + data);\n    });\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    onClick: Dummy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n};\n\nfunction Box(props, data) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0.1); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => mesh.current.rotation.x = mesh.current.rotation.y += rotation);\n  return React.createElement(\"mesh\", Object.assign({}, props, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: hovered ? \"hotpink\" : \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n}\n\nexport default Box;","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js"],"names":["React","useRef","useState","useEffect","useFrame","io","endpoint","socket","Dummy","on","data","console","log","Box","props","mesh","hovered","setHover","active","setActive","rotation","setRotation","current","x","y","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,QAAQ,GAAG,wBAAjB;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACC,QAAD,CAAjB;;AAEA,MAAME,KAAK,GAAG,MAAM;AAClBL,EAAAA,SAAS,CAAC,MAAM;AACd;AACAI,IAAAA,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmBC,IAAI,IAAI;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAASF,IAArB;AACD,KAFD;AAGD,GALQ,CAAT;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEF,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAZD;;AAcA,SAASK,GAAT,CAAaC,KAAb,EAAoBJ,IAApB,EAA0B;AACxB;AACA,QAAMK,IAAI,GAAGd,MAAM,EAAnB,CAFwB,CAIxB;;AACA,QAAM,CAACe,OAAD,EAAUC,QAAV,IAAsBf,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,GAAD,CAAxC,CAPwB,CASxB;;AACAE,EAAAA,QAAQ,CACN,MAAOW,IAAI,CAACO,OAAL,CAAaF,QAAb,CAAsBG,CAAtB,GAA0BR,IAAI,CAACO,OAAL,CAAaF,QAAb,CAAsBI,CAAtB,IAA2BJ,QADtD,CAAR;AAIA,SACE,8CACMN,KADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAEO,CAAC,IAAIN,SAAS,CAAC,CAACD,MAAF,CAJzB;AAKE,IAAA,aAAa,EAAEO,CAAC,IAAIR,QAAQ,CAAC,IAAD,CAL9B;AAME,IAAA,YAAY,EAAEQ,CAAC,IAAIR,QAAQ,CAAC,KAAD,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe,QAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAgBD;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nconst endpoint = \"http://localhost:3005/\";\nconst socket = io(endpoint);\n\nconst Dummy = () => {\n  useEffect(() => {\n    //This is not working, continues to update three js until it crashes.\n    socket.on(\"three\", data => {\n      console.log(\"hit \" + data);\n    });\n  });\n  return (\n    <div>\n      <button type=\"button\" onClick={Dummy}></button>\n    </div>\n  );\n};\n\nfunction Box(props, data) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0.1);\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(\n    () => (mesh.current.rotation.x = mesh.current.rotation.y += rotation)\n  );\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={e => setActive(!active)}\n      onPointerOver={e => setHover(true)}\n      onPointerOut={e => setHover(false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={hovered ? \"hotpink\" : \"orange\"}\n      />\n    </mesh>\n  );\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}