{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js\";\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { useFrame, Dom } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  const endpoint = \"http://localhost:3005/\";\n  const socket = io(endpoint); // This reference will give us direct access to the mesh\n\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0); //   useLayoutEffect(() => {\n  //     updateRotation();\n  //   });\n\n  const updateRotation = () => {\n    socket.on(\"incoming\", setRotation);\n  }; // Rotate mesh every frame, this is outside of React without overhead\n\n\n  useFrame(() => mesh.current.rotation.x = mesh.current.rotation.y += rotation);\n  return React.createElement(\"group\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"mesh\", Object.assign({}, props, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: hovered ? \"hotpink\" : \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(Dom, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"update\",\n    onClick: updateRotation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })));\n}\n\nexport default Box;","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js"],"names":["React","useRef","useState","useLayoutEffect","useFrame","Dom","io","Box","props","endpoint","socket","mesh","hovered","setHover","active","setActive","rotation","setRotation","updateRotation","on","current","x","y","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,eAAlC,QAAyD,OAAzD;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,mBAA9B;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAMC,QAAQ,GAAG,wBAAjB;AACA,QAAMC,MAAM,GAAGJ,EAAE,CAACG,QAAD,CAAjB,CAFkB,CAGlB;;AACA,QAAME,IAAI,GAAGV,MAAM,EAAnB,CAJkB,CAMlB;;AACA,QAAM,CAACW,OAAD,EAAUC,QAAV,IAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,CAAD,CAAxC,CATkB,CAWlB;AACA;AACA;;AAEA,QAAMgB,cAAc,GAAG,MAAM;AAC3BR,IAAAA,MAAM,CAACS,EAAP,CAAU,UAAV,EAAsBF,WAAtB;AACD,GAFD,CAfkB,CAmBlB;;;AACAb,EAAAA,QAAQ,CACN,MAAOO,IAAI,CAACS,OAAL,CAAaJ,QAAb,CAAsBK,CAAtB,GAA0BV,IAAI,CAACS,OAAL,CAAaJ,QAAb,CAAsBM,CAAtB,IAA2BN,QADtD,CAAR;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,8CACMR,KADN;AAEE,IAAA,GAAG,EAAEG,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAES,CAAC,IAAIR,SAAS,CAAC,CAACD,MAAF,CAJzB;AAKE,IAAA,aAAa,EAAES,CAAC,IAAIV,QAAQ,CAAC,IAAD,CAL9B;AAME,IAAA,YAAY,EAAEU,CAAC,IAAIV,QAAQ,CAAC,KAAD,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe,QAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,EAeE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEM,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAfF,CADF;AAqBD;;AAED,eAAeX,GAAf","sourcesContent":["import React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { useFrame, Dom } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  const endpoint = \"http://localhost:3005/\";\n  const socket = io(endpoint);\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0);\n\n  //   useLayoutEffect(() => {\n  //     updateRotation();\n  //   });\n\n  const updateRotation = () => {\n    socket.on(\"incoming\", setRotation);\n  };\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(\n    () => (mesh.current.rotation.x = mesh.current.rotation.y += rotation)\n  );\n\n  return (\n    <group>\n      <mesh\n        {...props}\n        ref={mesh}\n        scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n        onClick={e => setActive(!active)}\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}\n      >\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={hovered ? \"hotpink\" : \"orange\"}\n        />\n      </mesh>\n      <Dom>\n        <button type=\"update\" onClick={updateRotation} />\n      </Dom>\n    </group>\n  );\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}