{"ast":null,"code":"var _jsxFileName = \"/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  const endpoint = \"http://localhost:3005/\";\n  const socket = io(endpoint); // This reference will give us direct access to the mesh\n\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0.1);\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      console.log(\"hit\" + data);\n      setRotation(data);\n    });\n  }, []); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => mesh.current.rotation.x = mesh.current.rotation.y += rotation);\n  return React.createElement(\"mesh\", Object.assign({}, props, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: hovered ? \"hotpink\" : \"orange\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n}\n\nexport default Box;","map":{"version":3,"sources":["/Users/benlangham/Documents/Uni_Year_3/Dissertation_Final Year Project/FInal_Year_Project/dev/testapp/Frontend/src/components/Three.js"],"names":["React","useRef","useState","useEffect","useFrame","io","Box","props","endpoint","socket","mesh","hovered","setHover","active","setActive","rotation","setRotation","on","data","console","log","current","x","y","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAMC,QAAQ,GAAG,wBAAjB;AACA,QAAMC,MAAM,GAAGJ,EAAE,CAACG,QAAD,CAAjB,CAFkB,CAGlB;;AACA,QAAME,IAAI,GAAGT,MAAM,EAAnB,CAJkB,CAMlB;;AACA,QAAM,CAACU,OAAD,EAAUC,QAAV,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,GAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAmBC,IAAI,IAAI;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,IAApB;AACAF,MAAAA,WAAW,CAACE,IAAD,CAAX;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT,CAXkB,CAkBlB;;AACAd,EAAAA,QAAQ,CACN,MAAOM,IAAI,CAACW,OAAL,CAAaN,QAAb,CAAsBO,CAAtB,GAA0BZ,IAAI,CAACW,OAAL,CAAaN,QAAb,CAAsBQ,CAAtB,IAA2BR,QADtD,CAAR;AAIA,SACE,8CACMR,KADN;AAEE,IAAA,GAAG,EAAEG,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAEW,CAAC,IAAIV,SAAS,CAAC,CAACD,MAAF,CAJzB;AAKE,IAAA,aAAa,EAAEW,CAAC,IAAIZ,QAAQ,CAAC,IAAD,CAL9B;AAME,IAAA,YAAY,EAAEY,CAAC,IAAIZ,QAAQ,CAAC,KAAD,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe,QAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAgBD;;AAED,eAAeL,GAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport io from \"socket.io-client\";\n\nfunction Box(props) {\n  const endpoint = \"http://localhost:3005/\";\n  const socket = io(endpoint);\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false);\n  const [active, setActive] = useState(false);\n  const [rotation, setRotation] = useState(0.1);\n\n  useEffect(() => {\n    socket.on(\"three\", data => {\n      console.log(\"hit\" + data);\n      setRotation(data);\n    });\n  }, []);\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(\n    () => (mesh.current.rotation.x = mesh.current.rotation.y += rotation)\n  );\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={e => setActive(!active)}\n      onPointerOver={e => setHover(true)}\n      onPointerOut={e => setHover(false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={hovered ? \"hotpink\" : \"orange\"}\n      />\n    </mesh>\n  );\n}\n\nexport default Box;\n"]},"metadata":{},"sourceType":"module"}